#include <WiFi.h>
#include <WebServer.h>
#include <esp_camera.h>
#include <SD_MMC.h>
#include <ArduinoJson.h>
#include <FS.h>
#include "miniz.h"

void handleRoot();
void handleNotFound();
void handleGetData();
void handleImages();
void handleDownload();
void handleDownloadImage();
void handleDownloadImages();
void handleDeleteData();
void initCamera();
void initWiFiAndServer();
void initSDCard();
void serialTask(void* pvParameters);
void serverTask(void* pvParameters);

#define FLASHLIGHT 4
#define BATTERY_PIN 33
#define SS_BAUD 38400
#define SS_DEBUG false
#define ZIP_NAME "/images.zip"
#define CSV_PATH "/bmi_data.csv"
#define IMG_DIR "/images"

// Wi-Fi and server settings
const char* ssid = "BMI_SYSTEM";
const char* password = "12345678";
const int port = 80;
char ipAddress[25] = "";
WebServer server(port);

// Global variables
String serialData = "";
JsonDocument jsonDoc;  // Fixed-size JSON document

// Camera configuration
void initCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sccb_sda = 26;
  config.pin_sccb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_VGA;
  config.jpeg_quality = 10;
  config.fb_count = 1;

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    if (SS_DEBUG) Serial.printf("Camera init failed: 0x%x\n", err);
  } else {
    if (SS_DEBUG) Serial.println("Camera initialized");
  }
}

// Initialize SD card and CSV file
void initSDCard() {
  if (!SD_MMC.begin()) {
    if (SS_DEBUG) Serial.println("SD Card Mount Failed");
    return;
  }
  if (!SD_MMC.mkdir(IMG_DIR)) {
    if (SS_DEBUG) Serial.println("Failed to create /images folder (may exist)");
  }
  File file = SD_MMC.open(CSV_PATH, FILE_READ);
  if (!file) {
    file = SD_MMC.open(CSV_PATH, FILE_WRITE);
    if (file) {
      file.println("ID,Height (m),Weight (kg),BMI, Age,Timestamp,Battery (V),Image");
      file.close();
      if (SS_DEBUG) Serial.println("Created bmi_data.csv");
    }
  } else {
    file.close();
  }
}

// Initialize Wi-Fi and web server
void initWiFiAndServer() {
  WiFi.softAP(ssid, password);
  WiFi.softAPIP().toString().toCharArray(ipAddress, sizeof(ipAddress));
  if (SS_DEBUG) Serial.printf("AP started: %s\n", ipAddress);

  server.on("/", handleRoot);
  server.on("/api/getdata", handleGetData);
  server.on("/api/images", HTTP_GET, handleImages);
  server.on("/api/download", handleDownload);
  server.on("/api/download-image", HTTP_GET, handleDownloadImage);
  server.on("/api/download-images", handleDownloadImages);
  server.on("/api/delete-data", handleDeleteData);
  server.onNotFound(handleNotFound);
  server.begin();
  if (SS_DEBUG) Serial.println("Web server started");
}

// Get the next available ID from CSV
int getNextId() {
  File file = SD_MMC.open(CSV_PATH, FILE_READ);
  int id = 0;
  if (file) {
    file.readStringUntil('\n');  // Skip header
    while (file.available()) {
      String line = file.readStringUntil('\n');
      int firstComma = line.indexOf(',');
      if (firstComma != -1) {
        id = line.substring(0, firstComma).toInt();
      }
    }
    file.close();
  }
  return id + 1;
}

// Read battery voltage (assuming 2:1 voltage divider, 4.2V max)
// float readBatteryVoltage() {
//   int adcValue = analogRead(BATTERY_PIN);
//   float voltage = (adcValue / 4095.0) * 4.2 * 2;  // 12-bit ADC, 2:1 divider
//   return voltage;
// }

// Save BMI data to CSV
void saveDataToCsv(float height, float weight, float bmi, String age, String timestamp, String imageName, float batteryVoltage) {
  File file = SD_MMC.open(CSV_PATH, FILE_APPEND);
  if (file) {
    String csvLine = String(getNextId()) + "," + String(height, 2) + "," +
                     String(weight, 2) + "," + String(bmi, 2) + "," + age + "," +
                     timestamp + ","  + String(batteryVoltage, 2)+ "," + imageName;
    file.println(csvLine);
    file.close();
    if (SS_DEBUG) Serial.println("Saved CSV: " + csvLine);
  } else {
    if (SS_DEBUG) Serial.println("Failed to open bmi_data.csv for writing");
  }
}

// Save image to SD card
bool saveImage(String timestamp) {
  digitalWrite(FLASHLIGHT, HIGH);
  camera_fb_t* fb = esp_camera_fb_get();
  vTaskDelay(1000 / portTICK_PERIOD_MS);
  digitalWrite(FLASHLIGHT, LOW);
  if (!fb) {
    if (SS_DEBUG) Serial.println("Camera capture failed");
    return false;
  }

  String safeTimestamp = timestamp;
  safeTimestamp.replace(":", "-");
  String imageName = String(IMG_DIR) + "/img_" + safeTimestamp + ".jpg";
  File file = SD_MMC.open(imageName, FILE_WRITE);
  if (file) {
    file.write(fb->buf, fb->len);
    file.close();
    if (SS_DEBUG) Serial.println("Saved image: " + imageName);
  } else {
    if (SS_DEBUG) Serial.println("Failed to save image: " + imageName);
    esp_camera_fb_return(fb);
    return false;
  }

  esp_camera_fb_return(fb);
  return true;
}

// Send JSON response over Serial
void sendSerialJson(const char* cmd, const char* msg, String host = "") {
  jsonDoc.clear();
  jsonDoc["cmd"] = cmd;
  if (msg) jsonDoc["msg"] = msg;
  // if (host.length() > 0) jsonDoc["host"] = host;
  serializeJson(jsonDoc, Serial);
  Serial.println();  // Newline for Arduino compatibility
  // if (SS_DEBUG) Serial.println("Sent JSON: cmd=" + String(cmd) + "(msg ? ", msg=" + String(msg) : "") + (host.length() > 0 ? ", host=" + host : ""));
}

// Web server root handler
void handleRoot() {
  const char* html = R"rawliteral(
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>BMI System</title>
  <style>
    * {
      margin: 0 auto;
      /* font-size: 3rem; */
    }
    h1, p, a {
      margin-bottom: 5px;
      /* font-size: 100%; */
    }
    input[type="button"] {
      font-weight: bold;
    }
    body{max-width: 100vw;}
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid black; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    a { margin: 0 5px; }
    input[type=date] { padding: 5px; }
    .container { max-width: 800px; margin: 0 auto; text-align: center; }
  </style>
</head>
<body>
  <div class="container">
    <h1>BMI System</h1>
    <p><a href="/api/download">Download CSV</a> | <a href="/api/download-images">Download All Images</a> | <a href="/api/delete-data">Delete Data</a></p>
    <p>Filter by Date: <input type="date" id="dateFilter" > | Filter by age: <input type="number" id="ageFilter"> | <input type="button" value="Reset Filter" onclick="resetFilter()"></input></p>
    <table id="dataTable" border="1">
      <tr>
        <th>ID</th>
        <th>Height (m)</th>
        <th>Weight (kg)</th>
        <th>BMI</th>
        <th>Age</th>
        <th onclick="sortTable()" style="cursor:pointer;">Timestamp &#x2195;</th>
        <th>Battery (V)</th>
        <th>Image</th>
      </tr>
    </table>
  </div>
  <script>
    let sortAscending = true;
    let currentData = [];
    function updateTable(data) {
      const table = document.getElementById("dataTable");
      while (table.rows.length > 1) table.deleteRow(1);
      const filterDate = document.getElementById("dateFilter").value;
      data.forEach(entry => {
        if (!filterDate || entry.timestamp.startsWith(filterDate)) {
          const row = table.insertRow();
          row.insertCell().textContent = entry.id;
          row.insertCell().textContent = entry.height;
          row.insertCell().textContent = entry.weight;
          row.insertCell().textContent = entry.bmi;
          row.insertCell().textContent = entry.age;
          row.insertCell().textContent = entry.timestamp;
          row.insertCell().textContent = entry.battery;
          const cell = row.insertCell();
          cell.innerHTML = `<a href="/api/images?file=${entry.image}">View</a><a href="/api/download-image?file=${entry.image}">Download</a>`;
        }
      });
    }
    function sortTable() {
      sortAscending = !sortAscending;
      currentData.sort((a, b) => {
        const dateA = new Date(a.timestamp);
        const dateB = new Date(b.timestamp);
        return sortAscending ? dateA - dateB : dateB - dateA;
      });
      updateTable(currentData);
    }
    function applyFilter() {
      console.log(e)
      updateTable(currentData);
    }
    function resetFilter() {
      console.log("reset")
      updateTable(currentData);
    }
    function fetchData() {
      fetch('/api/getdata')
        .then(response => response.json())
        .then(data => {
          currentData = data;
          updateTable(data);
        })
        .catch(error => console.error('Error fetching data:', error));
    }
    fetchData();
    setInterval(fetchData, 5000);

    const age_filter = document.querySelector("#ageFilter")
    age_filter.onkeyup = function(e){
      console.log(e.currentTarget.value)
      let filtered_data = currentData.filter(data => data.age == e.currentTarget.value || data)
      updateTable(filtered_data)
    }

    const date_filter = document.querySelector("#dateFilter")
    date_filter.onkeyup = function(e){
      console.log(e.currentTarget.value)
      if
      let filtered_data = currentData.filter(data => data.timestamp.indexOf(e.currentTarget.value) > 0 || data)
      updateTable(filtered_data)
    }
  </script>
</body>
</html>
)rawliteral";
  server.send(200, "text/html", html);
}

void handleDeleteData() {
  SD_MMC.remove(CSV_PATH);
  if(SD_MMC.exists(ZIP_NAME)){
    SD_MMC.remove(ZIP_NAME);
  }
  SD_MMC.rmdir(IMG_DIR);
  initSDCard();
  server.send(200, "text/html", "<h>All folder and files deleted</h1>");
}

// Web server data handler
void handleGetData() {
  File file = SD_MMC.open(CSV_PATH, FILE_READ);
  JsonDocument doc;  // Larger size for CSV data
  JsonArray array = doc.to<JsonArray>();

  if (file) {
    file.readStringUntil('\n');  // Skip header
    while (file.available()) {
      String line = file.readStringUntil('\n');
      int c1 = line.indexOf(',');
      int c2 = line.indexOf(',', c1 + 1);
      int c3 = line.indexOf(',', c2 + 1);
      int c4 = line.indexOf(',', c3 + 1);
      int c5 = line.indexOf(',', c4 + 1);
      int c6 = line.indexOf(',', c5 + 1);
      int c7 = line.indexOf(',', c6 + 1);
      if (c1 != -1 && c2 != -1 && c3 != -1 && c4 != -1 && c5 != -1) {
        JsonObject entry = array.add<JsonObject>();
        entry["id"] = line.substring(0, c1).toInt();
        entry["height"] = line.substring(c1 + 1, c2).toFloat();
        entry["weight"] = line.substring(c2 + 1, c3).toFloat();
        entry["bmi"] = line.substring(c3 + 1, c4).toFloat();
        entry["age"] = line.substring(c4 + 1, c5).toInt();
        entry["timestamp"] = line.substring(c5 + 1, c6);
        entry["battery"] = line.substring(c6 + 1, c7).toFloat();
        entry["image"] = line.substring(c7 + 1);
        
      }
    }
    file.close();
  } else {
    if (SS_DEBUG) Serial.println("Failed to open bmi_data.csv");
  }

  String jsonOutput;
  serializeJson(array, jsonOutput);
  server.send(200, "application/json", jsonOutput);
}

// Web server CSV download handler
void handleDownload() {
  File file = SD_MMC.open(CSV_PATH, FILE_READ);
  if (file) {
    server.streamFile(file, "text/csv");
    file.close();
  } else {
    server.send(404, "text/plain", "CSV file not found");
  }
}

// Web server image view handler
void handleImages() {
  if (server.hasArg("file")) {
    String filePath = String(IMG_DIR) + "/" + server.arg("file");
    File file = SD_MMC.open(filePath, FILE_READ);
    if (file) {
      server.streamFile(file, "image/jpeg");
      file.close();
    } else {
      server.send(404, "text/plain", "Image not found");
    }
  } else {
    server.send(400, "text/plain", "Missing file parameter");
  }
}

// Web server image download handler
void handleDownloadImage() {
  if (server.hasArg("file")) {
    String filePath = String(IMG_DIR) + "/" + server.arg("file");
    File file = SD_MMC.open(filePath, FILE_READ);
    if (file) {
      String fileName = server.arg("file");
      server.streamFile(file, "image/jpeg");
      file.close();
    } else {
      server.send(404, "text/plain", "Image not found");
    }
  } else {
    server.send(400, "text/plain", "Missing file parameter");
  }
}

// Web server ZIP download handler
void handleDownloadImages() {
  File root = SD_MMC.open(IMG_DIR);
  if (!root || !root.isDirectory()) {
    server.send(404, "text/plain", "Images folder not found");
    return;
  }

  File zip_file = SD_MMC.open(ZIP_NAME, FILE_WRITE);
  if(!zip_file){
    server.send(500, "text/plain", "Failed to create ZIP file - SD");
    return;
  }
  zip_file.close();

  mz_zip_archive zip_archive;
  memset(&zip_archive, 0, sizeof(zip_archive));
  if (!mz_zip_writer_init_file(&zip_archive, ZIP_NAME, 0)) {
    if (SS_DEBUG) Serial.println("ZIP init failed");
    server.send(500, "text/plain", "Failed to create ZIP file - ZIP");
    return;
  }

  File file = root.openNextFile();
  while (file) {
    if (!file.isDirectory()) {
      String filePath = String(IMG_DIR) + "/" + String(file.name());
      size_t fileSize = file.size();
      uint8_t* fileData = (uint8_t*)malloc(fileSize);
      if (fileData) {
        file.read(fileData, fileSize);
        // mz_zip_writer_add_mem(&zip_archive, file.name(), fileData, fileSize, MZ_BEST_COMPRESSION)
        if (!mz_zip_writer_add_file(&zip_archive, file.name(), filePath.c_str(), NULL, 0, MZ_BEST_COMPRESSION)) {
          if (SS_DEBUG) Serial.println("Failed to add file to ZIP: " + String(file.name()));
          server.send(500, "text/plain", "Failed to add file to ZIP");

        }
        free(fileData);
      } else {
        if (SS_DEBUG) Serial.println("Memory allocation failed for: " + String(file.name()));
        server.send(500, "text/plain", "Memory allocation failed");
      }
    }
    file.close();
    file = root.openNextFile();
  }
  root.close();

  if (!mz_zip_writer_finalize_archive(&zip_archive)) {
    if (SS_DEBUG) Serial.println("ZIP finalize failed");
    mz_zip_writer_end(&zip_archive);
    server.send(500, "text/plain", "Failed to finalize ZIP");
    return;
  }
  mz_zip_writer_end(&zip_archive);

  File zipFile = SD_MMC.open(ZIP_NAME, FILE_READ);
  if (zipFile) {
    server.streamFile(zipFile, "application/zip");
    zipFile.close();
    SD_MMC.remove(ZIP_NAME);
  } else {
    server.send(500, "text/plain", "Failed to open ZIP file");
  }
}

// Web server not found handler
void handleNotFound() {
  server.send(404, "text/plain", "Not found");
}

// Serial task for Arduino communication
void serialTask(void* pvParameters) {
  for (;;) {
    if (Serial.available()) {
      String data = Serial.readStringUntil('\n');
      if (SS_DEBUG) Serial.println("Received: " + data);
      DeserializationError error = deserializeJson(jsonDoc, data);
      if (error) {
        if (SS_DEBUG) Serial.println("JSON Error: " + String(error.c_str()));
        sendSerialJson("status", "JSON_ERR");
        jsonDoc.clear();
        vTaskDelay(100 / portTICK_PERIOD_MS);
        continue;
      }

      String cmd = jsonDoc["cmd"].as<String>();
      // Serial.print("CMD: "); Serial.println(cmd);
      if (cmd == "ping") {
        sendSerialJson("ping", "pong");
      } else if (cmd == "host") {
        sendSerialJson("host", ipAddress);
      } else if (cmd == "bmi_data") {
        float height = jsonDoc["height"].as<float>() / 100;
        float weight = jsonDoc["weight"].as<float>();
        float bmi = jsonDoc["bmi"].as<float>();
        String age = jsonDoc["age"].as<String>();
        String timestamp = jsonDoc["timestamp"].as<String>();
        float batteryVoltage = jsonDoc["battery"].as<float>();
        // Serial.print("height"); Serial.println(height);
        String imageName = "img_" + timestamp;
        imageName.replace(":", "-");
        imageName += ".jpg";
        saveDataToCsv(height, weight, bmi, age, timestamp, imageName, batteryVoltage);  // Convert height to cm
        bool success = saveImage(timestamp);
        sendSerialJson("status", success ? "IMG_OK" : "IMG_ERR");
      } else {
        sendSerialJson("status", "INVALID_CMD");
      }
      jsonDoc.clear();
    }
    vTaskDelay(100 / portTICK_PERIOD_MS);
  }
}

// Server task for web requests
void serverTask(void* pvParameters) {
  for (;;) {
    server.handleClient();
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
}

void setup() {
  Serial.begin(SS_BAUD);
  analogReadResolution(12);  // 12-bit ADC (0–4095)
  pinMode(FLASHLIGHT, OUTPUT);
  digitalWrite(FLASHLIGHT, LOW);

  initCamera();
  initSDCard();
  initWiFiAndServer();

  xTaskCreatePinnedToCore(serialTask, "SerialTask", 10000, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(serverTask, "ServerTask", 10000, NULL, 1, NULL, 0);
}

void loop() {
  // Empty loop; tasks handle all functionality
}

// {"cmd":"bmi_data","height":173.00,"weight":51.58,"bmi":17.24,"timestamp":"2025-09-29 19:33","battery": 3.10,"age":"89"}